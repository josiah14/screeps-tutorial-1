'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ = require('lodash'),
    utils = require('../../../utils'),
    driver = utils.getDriver(),
    C = driver.constants,
    movement = require('../movement');

module.exports = function (spawn, creep, roomObjects, roomTerrain, bulk, stats) {

    var newX, newY, isOccupied, hostileOccupied;
    var checkObstacleFn = function checkObstacleFn(i) {
        return _.contains(C.OBSTACLE_OBJECT_TYPES, i.type) && i.x == newX && i.y == newY;
    };

    for (var direction = 1; direction <= 8; direction++) {
        var _utils$getOffsetsByDi = utils.getOffsetsByDirection(direction),
            _utils$getOffsetsByDi2 = _slicedToArray(_utils$getOffsetsByDi, 2),
            dx = _utils$getOffsetsByDi2[0],
            dy = _utils$getOffsetsByDi2[1];

        newX = spawn.x + dx;
        newY = spawn.y + dy;
        isOccupied = _.any(roomObjects, checkObstacleFn) || utils.checkTerrain(roomTerrain, newX, newY, C.TERRAIN_MASK_WALL) || movement.isTileBusy(newX, newY);

        if (!isOccupied) {
            break;
        }

        if (!hostileOccupied) {
            hostileOccupied = _.find(roomObjects, function (i) {
                return i.x == newX && i.y == newY && i.type == 'creep' && i.user != spawn.user;
            });
        }
    }

    if (!isOccupied) {
        bulk.update(creep, {
            x: newX,
            y: newY,
            spawning: false
        });
        return true;
    } else if (hostileOccupied) {
        require('../creeps/_die')(hostileOccupied, roomObjects, bulk, stats);
        bulk.update(creep, {
            x: hostileOccupied.x,
            y: hostileOccupied.y,
            spawning: false
        });
        return true;
    }

    return false;
};
//# sourceMappingURL=../../../sourcemaps/processor/intents/spawns/_born-creep.js.map
